// Get the canvas and context
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Set canvas size
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// Game variables
let player;
let bullets = [];
let enemies = [];
let keys = {};

// Player class
class Player {
    constructor() {
        this.width = 50;
        this.height = 50;
        this.x = canvas.width / 2 - this.width / 2;
        this.y = canvas.height - this.height - 20;
        this.speed = 5;
        this.color = 'white';
    }

    draw() {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    }

    move() {
        if (keys['ArrowLeft'] || keys['a']) {
            this.x -= this.speed;
        }
        if (keys['ArrowRight'] || keys['d']) {
            this.x += this.speed;
        }
        if (keys['ArrowUp'] || keys['w']) {
            this.y -= this.speed;
        }
        if (keys['ArrowDown'] || keys['s']) {
            this.y += this.speed;
        }

        // Prevent the player from going out of bounds
        if (this.x < 0) this.x = 0;
        if (this.x + this.width > canvas.width) this.x = canvas.width - this.width;
        if (this.y < 0) this.y = 0;
        if (this.y + this.height > canvas.height) this.y = canvas.height - this.height;
    }
}

// Bullet class
class Bullet {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.width = 5;
        this.height = 15;
        this.speed = 7;
    }

    draw() {
        ctx.fillStyle = 'red';
        ctx.fillRect(this.x, this.y, this.width, this.height);
    }

    move() {
        this.y -= this.speed;
    }
}

// Enemy class
class Enemy {
    constructor() {
        this.width = 40;
        this.height = 40;
        this.x = Math.random() * (canvas.width - this.width);
        this.y = -this.height; // Start off-screen
        this.speed = Math.random() * 3 + 1; // Random speed
    }

    draw() {
        ctx.fillStyle = 'green';
        ctx.fillRect(this.x, this.y, this.width, this.height);
    }

    move() {
        this.y += this.speed;
    }
}

// Handle keyboard input
document.addEventListener('keydown', (e) => {
    keys[e.key] = true;
});

document.addEventListener('keyup', (e) => {
    keys[e.key] = false;
});

// Handle shooting
document.addEventListener('keydown', (e) => {
    if (e.key === ' ' || e.key === 'Enter') {
        // Shoot a bullet
        bullets.push(new Bullet(player.x + player.width / 2 - 2.5, player.y));
    }
});

// Create a new enemy
function createEnemy() {
    enemies.push(new Enemy());
}

// Update and draw the game
function updateGame() {
    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Move and draw the player
    player.move();
    player.draw();

    // Move and draw the bullets
    bullets.forEach((bullet, index) => {
        bullet.move();
        bullet.draw();
        if (bullet.y < 0) bullets.splice(index, 1); // Remove bullets that go off screen
    });

    // Move and draw the enemies
    enemies.forEach((enemy, index) => {
        enemy.move();
        enemy.draw();
        if (enemy.y > canvas.height) {
            enemies.splice(index, 1); // Remove off-screen enemies
        }
    });

    // Check for bullet-enemy collisions
    bullets.forEach((bullet, bulletIndex) => {
        enemies.forEach((enemy, enemyIndex) => {
            if (bullet.x < enemy.x + enemy.width &&
                bullet.x + bullet.width > enemy.x &&
                bullet.y < enemy.y + enemy.height &&
                bullet.y + bullet.height > enemy.y) {
                // Collision detected
                bullets.splice(bulletIndex, 1); // Remove the bullet
                enemies.splice(enemyIndex, 1); // Remove the enemy
            }
        });
    });

    // Spawn new enemies periodically
    if (Math.random() < 0.02) {
        createEnemy();
}

// Repeat the game loop
requestAnimationFrame(updateGame);
}

// Create a player instance
player = new Player();

// Start the game loop
updateGame();
